C51 COMPILER V9.52.0.0   I2C_EEPROM                                                        02/09/2017 16:38:30 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE I2C_EEPROM
OBJECT MODULE PLACED IN .\Output\I2C_EEPROM.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\I2C_EEPROM.c BROWSE INCDIR(..\..\Include) DEFINE(FOSC_160000) DEBUG OB
                    -JECTEXTEND PRINT(.\LST\I2C_EEPROM.lst) TABS(2) OBJECT(.\Output\I2C_EEPROM.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* Copyright(c) 2017 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   4          /*                                                                                                        
             - */
   5          /*--------------------------------------------------------------------------------------------------------
             --*/
   6          
   7          //********************************************************************************************************
             -***
   8          //  Website: http://www.nuvoton.com
   9          //  E-Mail : MicroC-8bit@nuvoton.com
  10          //  Date   : Jan/21/2017
  11          //********************************************************************************************************
             -***
  12          
  13          //********************************************************************************************************
             -***
  14          //  File Function: N76E003 I2C demo code, Slave Address of 24LC64 = 0xA0
  15          //
  16          //   ____________           ______________ 
  17          //  |            |   SDA    |             |
  18          //  |            |<-------->|             |
  19          //  |            |          |             |
  20          //  |N76E003(M) |          |   24LC64(S) |
  21          //  |            |   SCL    |             |
  22          //  |            |--------->|             |
  23          //  |____________|          |_____________|
  24          //
  25          //  Microchip I2C EEPROM 24xx64 (64K Bit) is used as the slave device.  
  26          //  The page size are 32Byte. Total are 256 page.
  27          //  If verification passes, Port3 will show 0x78. If there is any failure
  28          //  occured during the progress, Port3 will show 0x00.
  29          //********************************************************************************************************
             -***
  30          
  31          #include "N76E003.h"
  32          #include "SFR_Macro.h"
  33          #include "Function_define.h"
  34          #include "Common.h"
  35          #include "Delay.h"
  36          
  37          
  38          //********************************************************************************************************
             -***
  39          #define SYS_CLK_EN              0
  40          #define SYS_SEL                 2
  41          #define SYS_DIV_EN              0                   //0: Fsys=Fosc, 1: Fsys = Fosc/(2*CKDIV)
  42          #define SYS_DIV                 1
  43          #define I2C_CLOCK               2
  44          
C51 COMPILER V9.52.0.0   I2C_EEPROM                                                        02/09/2017 16:38:30 PAGE 2   

  45          #define EEPROM_SLA              0xA0
  46          #define EEPROM_WR               0
  47          #define EEPROM_RD               1
  48          
  49          #define LED                     P3
  50          #define PAGE_SIZE               32
  51          #define PAGE_NUMBER             4
  52          
  53          #define ERROR_CODE              0x78
  54          #define TEST_OK                 0x00
  55          
  56          //========================================================================================================
  57          void Init_I2C(void)
  58          {
  59   1          /* Set I2C clock rate */
  60   1          I2CLK = I2C_CLOCK; 
  61   1      
  62   1          /* Enable I2C */
  63   1          set_I2CEN;                                   
  64   1      }
  65          //========================================================================================================
  66          void One_Page_Read(UINT8 u8PageNumber,UINT8 u8DAT)
  67          {
  68   1          UINT8  u8Count;
  69   1          UINT16 u16Address;
  70   1      
  71   1          u16Address = (UINT16)u8PageNumber*32;
  72   1      
  73   1          /* Step1 */
  74   1          set_STA;                                /* Send Start bit to I2C EEPROM */
  75   1          clr_SI;
  76   1          while (!SI);
  77   1          if (I2STAT != 0x08)                     /* 0x08:  A START condition has been transmitted*/
  78   1          {
  79   2              LED = ERROR_CODE;
  80   2              printf("\nI2C 'Send STA' error");
  81   2              while (1);
  82   2          }
  83   1      
  84   1          /* Step2 */
  85   1          I2DAT = (EEPROM_SLA | EEPROM_WR);       /* Send (SLA+W) to EEPROM */
  86   1          clr_STA;                                /* Clear STA and Keep SI value in I2CON */    
  87   1          clr_SI;
  88   1          while (!SI);
  89   1          if (I2STAT != 0x18)                     /* 0x18: SLA+W has been transmitted; ACK has been received */ 
             -             
  90   1          {
  91   2              LED = ERROR_CODE;
  92   2              printf("\nI2C 'Send SLA+W' error");
  93   2              while(1);
  94   2          }
  95   1      
  96   1          /* Step3 */
  97   1          I2DAT = HIBYTE(u16Address);             /* Send I2C EEPROM's High Byte Address */
  98   1          clr_SI;
  99   1          while (!SI);
 100   1          if (I2STAT != 0x28)                     /* 0x28:  Data byte in S1DAT has been transmitted; ACK has bee
             -n received */              
 101   1          {
 102   2              LED = ERROR_CODE;
 103   2              printf("\nI2C 'Send I2C High Byte Address' error");
 104   2              while (1);
C51 COMPILER V9.52.0.0   I2C_EEPROM                                                        02/09/2017 16:38:30 PAGE 3   

 105   2          }
 106   1      
 107   1          /* Step4 */
 108   1          I2DAT = LOBYTE(u16Address);             /* Send I2C EEPROM's Low Byte Address */
 109   1          clr_SI;
 110   1          while (!SI);
 111   1          if (I2STAT != 0x28)                     /* 0x28:  Data byte in S1DAT has been transmitted; ACK has bee
             -n received */             
 112   1          {
 113   2              LED = ERROR_CODE;
 114   2              printf("\nI2C 'Send I2C Low Byte Address' error");
 115   2              while (1);
 116   2          }
 117   1      
 118   1          /* Step5 */
 119   1          set_STA;                                /* Repeated START */
 120   1          clr_SI; 
 121   1          while (!SI);
 122   1          if (I2STAT != 0x10)                     /* 0x10: A repeated START condition has been transmitted */
 123   1          {
 124   2              LED = ERROR_CODE;
 125   2              printf("\nI2C 'Send STA' error");
 126   2              while (1);
 127   2          }
 128   1      
 129   1          /* Step6 */
 130   1          clr_STA;                                /* Clear STA and Keep SI value in I2CON */
 131   1          I2DAT = (EEPROM_SLA | EEPROM_RD);       /* Send (SLA+R) to EEPROM */
 132   1          clr_SI;
 133   1          while (!SI);
 134   1          if (I2STAT != 0x40)                     /* 0x40:  SLA+R has been transmitted; ACK has been received */
             -              
 135   1          {
 136   2              LED = ERROR_CODE;
 137   2              printf("\nI2C 'Send SLA+R' error");
 138   2              while (1);
 139   2          }
 140   1      
 141   1          /* Step7 */                             /* Verify I2C EEPROM data */
 142   1          for (u8Count = 0; u8Count <PAGE_SIZE; u8Count++)
 143   1          {
 144   2              set_AA;                             /* Set Assert Acknowledge Control Bit */
 145   2              clr_SI;
 146   2              while (!SI);
 147   2              if (I2STAT != 0x50)                 /* 0x50:Data byte has been received; NOT ACK has been returned
             - */              
 148   2              {
 149   3                  LED = ERROR_CODE;
 150   3                  printf("\nI2C 'No Ack' error");
 151   3                  while (1);
 152   3              }
 153   2             
 154   2              if (I2DAT != u8DAT)                 /* Send the Data to EEPROM */    
 155   2              {
 156   3                  LED = ERROR_CODE;
 157   3                  printf("\nI2C 'Read data' error");
 158   3                  while (1);
 159   3              }
 160   2              u8DAT = ~u8DAT; 
 161   2          }
 162   1      
 163   1          /* Step8 */
C51 COMPILER V9.52.0.0   I2C_EEPROM                                                        02/09/2017 16:38:30 PAGE 4   

 164   1          clr_AA;                                 /* Send a NACK to disconnect 24xx64 */
 165   1          clr_SI;
 166   1          while (!SI);
 167   1          if (I2STAT != 0x58)                     /* 0x58:Data byte has been received; ACK has been returned */
 168   1          {
 169   2              LED = ERROR_CODE;
 170   2              printf("\nI2C 'Ack' error");
 171   2              while (1);
 172   2          }
 173   1          
 174   1          /* Step9 */    
 175   1          clr_SI;
 176   1          set_STO;
 177   1          while (STO);                            /* Check STOP signal */ 
 178   1      }
 179          //========================================================================================================
 180          void One_Page_Write(UINT8 u8PageNumber,UINT8 u8DAT)
 181          {
 182   1          UINT8  u8Count;
 183   1          UINT16 u16Address;
 184   1      
 185   1          u16Address = (UINT16)u8PageNumber*32;
 186   1      
 187   1          /* Step1 */
 188   1          set_STA;                                /* Send Start bit to I2C EEPROM */         
 189   1          clr_SI;
 190   1          while (!SI);
 191   1          if (I2STAT != 0x08)                     /* 0x08:  A START condition has been transmitted*/
 192   1          {
 193   2              LED = ERROR_CODE;
 194   2              printf("\nI2C 'Send STA' error");
 195   2              while (1);
 196   2          }
 197   1      
 198   1          /* Step2 */
 199   1          clr_STA;                                /* Clear STA and Keep SI value in I2CON */
 200   1          I2DAT = EEPROM_SLA | EEPROM_WR;         /* Send (SLA+W) to EEPROM */
 201   1          clr_SI;
 202   1          while (!SI);
 203   1          if (I2STAT != 0x18)                     /* 0x18: SLA+W has been transmitted; ACK has been received */ 
             -            
 204   1          {
 205   2              LED = ERROR_CODE;
 206   2              printf("\nI2C 'Send SLA+W' error");
 207   2              while (1);
 208   2          }
 209   1      
 210   1          /* Step3 */
 211   1          I2DAT = HIBYTE(u16Address);             /* Send EEPROM's High Byte Address */
 212   1          clr_SI;
 213   1          while (!SI);
 214   1          if (I2STAT != 0x28)                     /* 0x28:  Data byte in S1DAT has been transmitted; ACK has bee
             -n received */
 215   1          {
 216   2              LED = ERROR_CODE;
 217   2              printf("\nI2C 'Send High byte address' error");
 218   2              while (1);
 219   2          }
 220   1      
 221   1          /* Step4 */
 222   1          I2DAT = LOBYTE(u16Address);             /* Send EEPROM's Low Byte Address */
 223   1          clr_SI;
C51 COMPILER V9.52.0.0   I2C_EEPROM                                                        02/09/2017 16:38:30 PAGE 5   

 224   1          while (!SI);
 225   1          if (I2STAT != 0x28)                     /* 0x28:  Data byte in S1DAT has been transmitted; ACK has bee
             -n received */
 226   1          {
 227   2              LED = ERROR_CODE;
 228   2              printf("\nI2C 'Send Low byte address' error");
 229   2              while (1);
 230   2          }
 231   1      
 232   1          /* Step5 */
 233   1                                                  /* Write data to I2C EEPROM */
 234   1          for (u8Count = 0; u8Count < PAGE_SIZE; u8Count++)
 235   1          {
 236   2              I2DAT = u8DAT;                      /* Send data to EEPROM */
 237   2              clr_SI;
 238   2              while (!SI);
 239   2              if (I2STAT != 0x28)                 /* 0x28:  Data byte in S1DAT has been transmitted; ACK has bee
             -n received */
 240   2              {
 241   3                  LED = ERROR_CODE;
 242   3                  printf("\nI2C 'Write Data' error");
 243   3                  while (1);
 244   3              }   
 245   2              u8DAT = ~u8DAT;        
 246   2          }
 247   1                                                  //After STOP condition, a inner EEPROM timed-write-cycle 
 248   1                                                  //will occure and EEPROM will not response to outside command
 249   1                                                  /* 0x18: SLA+W has been transmitted; ACK has been received */
 250   1          /* Step6 */
 251   1          do
 252   1          {
 253   2              set_STO;                            /* Set I2C STOP Control Bit */
 254   2              clr_SI;
 255   2              while (STO);                        /* Check STOP signal */
 256   2              
 257   2              set_STA;                            /* Check if no ACK is returned by EEPROM, it is under timed-wr
             -ite cycle */
 258   2              clr_SI;
 259   2              while (!SI);
 260   2              if (I2STAT != 0x08)                 /* 0x08:  A START condition has been transmitted*/
 261   2              {
 262   3                  LED = ERROR_CODE;
 263   3                  printf("\nI2C 'Wait Ready' error");
 264   3                  while (1);
 265   3              }
 266   2      
 267   2              clr_STA;                            /* Clear STA and Keep SI value in I2CON */
 268   2              I2DAT = (EEPROM_SLA | EEPROM_WR);   /* Send (SLA+W) to EEPROM */
 269   2              clr_SI;
 270   2              while (!SI);
 271   2          }while(I2STAT != 0x18);
 272   1      
 273   1          /* Step7 */
 274   1          set_STO;                                /* Set STOP Bit to I2C EEPROM */
 275   1          clr_SI;
 276   1          while (STO);                            /* Check STOP signal */
 277   1      }
 278          //========================================================================================================
 279          void main(void)
 280          {
 281   1      
 282   1          Set_All_GPIO_Quasi_Mode;
C51 COMPILER V9.52.0.0   I2C_EEPROM                                                        02/09/2017 16:38:30 PAGE 6   

 283   1          InitialUART0_Timer3(115200);
 284   1        
 285   1          /* Initial I2C function */
 286   1          Init_I2C();                                 //initial I2C circuit
 287   1          
 288   1          /* page0 R/W */
 289   1          printf ("\n\n24LC64 Page0 Write (0x55,0xAA...)...");
 290   1          One_Page_Write(0,0x55);                     //page0, write 0x55,0xAA,........
 291   1      
 292   1          printf ("\n\n24LC64 Page0 Read...");
 293   1          One_Page_Read (0,0x55);                     //page0, read  0x55,0xAA,........
 294   1      
 295   1          /* page1 R/W */
 296   1          printf ("\n\n24LC64 Page1 Write (0x00,0xFF...)...");
 297   1          One_Page_Write(1,0x00);                     //page1, write 0x00,0xFF,........
 298   1          printf ("\n\n24LC64 Page1 Read...");
 299   1          One_Page_Read (1,0x00);                     //page1, read  0x00,0xFF,........
 300   1      
 301   1          /* page2 R/W */
 302   1          printf ("\n\n24LC64 Page2 Write (0xAA,0x55...)...");
 303   1          One_Page_Write(2,0xAA);                     //page2, write 0xAA,0x55,........
 304   1          printf ("\n\n24LC64 Page2 Read...");
 305   1          One_Page_Read (2,0xAA);                     //page2, read  0xAA,0x55,........
 306   1      
 307   1          /* page3 R/W */
 308   1          printf ("\n\n24LC64 Page3 Write (0xFF,0x00...)...");
 309   1          One_Page_Write(3,0xFF);                     //page3, write 0xFF,0x00,........
 310   1          printf ("\n\n24LC64 Page3 Read...");
 311   1          One_Page_Read (3,0xFF);                     //page3, read  0xFF,0x00,........
 312   1      
 313   1          /* page255 R/W */
 314   1          printf ("\n\n24LC64 Page255 Write (0x0F,0xF0...)...");
 315   1          One_Page_Write(255,0x0F);                   //page255, write 0x0F,0xF0,........
 316   1          printf ("\n\n24LC64 Page255 Read...");
 317   1          One_Page_Read (255,0x0F);                   //page255, read  0x0F,0xF0,........
 318   1      
 319   1          /* ==== Test Pass ==== */      
 320   1          printf ("\n\N76E003 <--> 24LC64, I2C Demo Code test pass...");
 321   1      
 322   1          while (1);
 323   1      /* =================== */
 324   1      }
 325          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    710    ----
   CONSTANT SIZE    =    691    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
